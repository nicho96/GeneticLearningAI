package ca.nicho.neuralnet2.neat2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Set;

import ca.nicho.neuralnet2.NeuralNetwork2;

public class SpeciationNEAT2 extends DefaultNEAT2 {
	
	public double variationThreshold = 0.5;
	public int lastNumberSpecies = 0;
	
	public SpeciationNEAT2(int inputSize, int outputSize, SimulateDelegate simulateDelegate, int speciesCapacity){
		super(inputSize, outputSize, simulateDelegate, speciesCapacity);
	}
	
	@Override
	protected void selection(){
		
		Collections.sort(networks);
		Collections.reverse(networks);
		
		//Sepciation portion
		LinkedHashMap<NeuralNetwork2, ArrayList<NeuralNetwork2>> species = new LinkedHashMap<NeuralNetwork2, ArrayList<NeuralNetwork2>>();
		for(NeuralNetwork2 nn : networks){
			boolean added = false;
			for(NeuralNetwork2 net : species.keySet()){
				if(getVariation(nn, net) < variationThreshold){
					added = true;
					species.get(net).add(nn);
					break;
				}
			}
			//If no species are similar to the network, create a new one
			if(!added){
				ArrayList<NeuralNetwork2> arr = new ArrayList<NeuralNetwork2>();
				arr.add(nn);
				species.put(nn, arr);
			}
		}
		
		/*if(Math.abs(lastNumberSpecies - species.size()) < 2){
			variationThreshold -= 0.01;
		}else{
			variationThreshold += 0.01;
		}*/
		
		lastNumberSpecies = species.size();
		
		verbose("Number of species: " + species.size() + ", Population: " + networks.size());
		
		ArrayList<NeuralNetwork2> selected = new ArrayList<NeuralNetwork2>(this.speciesCapacity);
		
		int index = 0;
		boolean running = true;
		while(running){
			for(ArrayList<NeuralNetwork2> list : species.values()){
				if(index < list.size()){
					selected.add(list.get(index));
				}
				if(selected.size() == networks.size() || selected.size() == speciesCapacity){
					running = false;
					break;
				}
			}
			index++;
		}
		
		this.networks = selected;
		
		verbose("Number of networks: " + this.networks.size());
		
		Collections.sort(networks);
		Collections.reverse(networks);
		
	}
	
}
