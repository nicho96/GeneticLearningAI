package ca.nicho.neuralnet2.neat2;

import java.util.ArrayList;

import ca.nicho.neuralnet2.NeuralNetwork2;

public abstract class NEAT2 {
	
	protected int innovationCount = 0;
	protected int neuronCount = 0;
	
	public ArrayList<NeuralNetwork2> networks = new ArrayList<NeuralNetwork2>();
	
	/**
	 * Default function called to handle the next generation of simulations.
	 * Can be overridden to accommodate for extended operations.
	 */
	public void nextGeneration(){
		
		this.simulateGeneration();
		this.selection();		
		this.onGenerationEnd();
		//this.crossoverGeneration();
		this.mutateGeneration();

		
	}
	
	/**
	 * Handles mutating the entire generation
	 */
	protected void mutateGeneration(){
		ArrayList<NeuralNetwork2> clones = new ArrayList<NeuralNetwork2>();
		for(NeuralNetwork2 nn : this.networks){
			NeuralNetwork2 clone = new NeuralNetwork2(nn);
			clone.simulated = false; //After mutation, network needs to be resimulated
			this.mutate(clone);
			clones.add(clone);

		}
		networks.addAll(clones);
	}
	
	/**
	 * Handles crossing over the entire generation
	 */
	protected abstract void crossoverGeneration();
	
	/**
	 * Handles simulating the generation
	 */
	protected abstract void simulateGeneration();
	
	/**
	 * Mutates a neural network.
	 * 
	 * Remember to use the innovationCount and neuronCount to identify changes to the network.
	 * New evolutions can be kept tracked of and seperated from old ones during crossover.
	 * @param nn The neural network being mutated
	 */
	protected abstract void mutate(NeuralNetwork2 nn);
	
	/**
	 * Combine two networks together to form a child
	 * @param p1 The first parent network
	 * @param p2 The second parent network
	 * @return the child network as a combination of both parents
	 */
	protected abstract NeuralNetwork2 crossover(NeuralNetwork2 p1, NeuralNetwork2 p2);
	
	/**
	 * Handles the selection of what networks will move on to the next generation.
	 * Should kill off the weaker species.
	 */
	protected abstract void selection();
	
	/**
	 * Optional function. Called by default at the end of a generation.
	 */
	protected void onGenerationEnd(){}
	
}
