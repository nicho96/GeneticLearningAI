package ca.nicho.smb3net;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

import ca.nicho.neuralnet2.neat2.SpeciationNEAT2;

public class SMBEvolver {

	private final DataInputStream stream;
	private final DataOutputStream out;
	private final int inputSize;
	private final int outputSize;
	
	public SMBEvolver(DataInputStream stream, DataOutputStream out){
		
		this.stream = stream;
		this.out = out;
		this.inputSize = getInputSize();
		
		SpeciationNEAT2 neat = new SpeciationNEAT2();
		
	}
	
	private int getInputSize() throws IOException{
		String inputStr = "";
		while(true){
			char c = (char)stream.read();
			if(c == '\n')
				break;
			
			inputStr += c;
		}
		return Integer.parseInt(inputStr);
	}
	
	private int getOutputSize() throws IOException{
		String outputStr = "";
		while(true){
			char c = (char)stream.read();
			if(c == '\n')
				break;
			
			outputStr += c;
		}
		return Integer.parseInt(outputStr);
	}
	
	private void readFrame(){
		
while(true){
				
	char c = (char)stream.read();
	
	//INPUT DATA PAYLOAD
	if(c == 'I'){
		
		//Get the input data
		byte[] data = new byte[inputSize];
		for(int i = 0; i < inputSize; i++){
			char d = (char)stream.read();
			data[i] = (byte)((d == 'b') ? 1 : (d == 'e') ? -1 : 0);
		}		
		
		
		
		//Return the output data
		for(int i = 0; i < outputSize; i++){
			out.write((((int)(Math.random() * 2)) + "").charAt(0));
		}
		out.write((byte)'\n');
		
		continue;
	}
	
	//FITNESS PAYLOAD (also means we need to move to the next generation)
	if(c == 'F'){
		String fitnessStr = "";
		while(true){
			char d = (char)stream.read();
			if(d == '\n')
				break;
			
			fitnessStr += d;
		}
		int fitness = Integer.parseInt(fitnessStr);
		System.out.print("Fitness: " + fitness);
		continue;
	}
	
}
	}
	
}
